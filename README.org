#+title: affe.el - Asynchronous Fuzzy Finder for Emacs
#+author: Daniel Mendler
#+language: en
#+export_file_name: affe.texi
#+texinfo_dir_category: Emacs
#+texinfo_dir_title: Affe: (affe).
#+texinfo_dir_desc: Asynchronous Fuzzy Finder for Emacs.

#+html: <a href="https://www.gnu.org/software/emacs/"><img alt="GNU Emacs" src="https://github.com/minad/corfu/blob/screenshots/emacs.svg?raw=true"/></a>
#+html: <a href="https://melpa.org/#/affe"><img alt="MELPA" src="https://melpa.org/packages/affe-badge.svg"/></a>
#+html: <a href="https://stable.melpa.org/#/affe"><img alt="MELPA Stable" src="https://stable.melpa.org/packages/affe-badge.svg"/></a>

#+html: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/Lar_Gibbon_%2846946767992%29.jpg/1920px-Lar_Gibbon_%2846946767992%29.jpg" align="right" width="40%">

This package provides an asynchronous fuzzy finder similar to the [[https://github.com/junegunn/fzf][fzf
command-line fuzzy finder]], written in pure Elisp. A producer process is started
in the background, e.g., ~find~, ~fd~ or ~ripgrep~. The output produced by this
process is filtered by an external asynchronous Emacs process. The Emacs UI
always stays responsive since the work is off-loaded to other processes. The
results are presented in the minibuffer using [[https://github.com/minad/consult][Consult]], which allows to quickly
select from the available items.

* Installation and Configuration

The package is available on MELPA and can be installed using the Emacs package
manager. If files should not be automatically previewed, a manual preview key
should be set for ~affe-grep~.

#+begin_src emacs-lisp
  (use-package affe
    :config
    ;; Manual preview key for `affe-grep'
    (consult-customize affe-grep :preview-key (kbd "M-.")))
#+end_src

The default regular expression transformation of Consult is limited. It is
recommended to configure [[https://github.com/oantolin/orderless][Orderless]] as =affe-regexp-compiler= in Consult.

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-
  (defun affe-orderless-regexp-compiler (input _type _ignorecase)
    (setq input (orderless-pattern-compiler input))
    (cons input (lambda (str) (orderless--highlight input str))))
  (setq affe-regexp-compiler #'affe-orderless-regexp-compiler)
#+end_src

Affe requires the ~find~ and ~rg~ ("ripgrep") command line programs to be available. The
producer processes can be customized by adjusting the variables
~affe-find-command~ and ~affe-grep-command~.

* Available commands

- ~affe-grep~: Filters the content of all text files in the current directory, similar to ~consult-grep~.
- ~affe-find~: Filters the file paths of all files in the current directory, similar to ~consult-find~.

* Related packages

Affe depends on Consult and works best with the Vertico completion UI.

- [[https://github.com/minad/consult][Consult]]: Useful search and navigation commands (Dependency of Affe).
- [[https://github.com/minad/marginalia][Marginalia]]: File annotations in the minibuffer.
- [[https://github.com/oantolin/embark][Embark]]: Minibuffer actions on files.
- [[https://github.com/oantolin/orderless][Orderless]]: Advanced completion style, can be plugged together with Affe.
- [[https://github.com/minad/vertico][Vertico]], [[https://github.com/raxod502/selectrum][Selectrum]] or [[https://github.com/oantolin/icomplete-vertical][Icomplete-vertical]]: Vertical completion systems
  (Icomplete-vertical is only needed for Emacs 27, built-in on Emacs 28)

* Details

The Affe frontend transforms the input string to a list of regular expressions
by calling the ~affe-regexp-function~. The regular expressions are passed to the
Affe backend via the ~emacsclient~ protocol. The backend controls a producer
process, which generates lines of text. The lines are filtered using the regular
expressions submitted by the frontend. For performance reasons,
~all-completions~ is used for the filtering. The backend returns only a limited
amount of matching candidates, hopefully the most plausible ones. The frontend
calls the ~affe-highlight-function~ on the returned matches, to highlight the
input pattern.

Affe uses a more primitive matching technique than ~fzf~, which uses the
[[https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm][Smith-Waterman algorithm]]. Affe does not perform any ranking or sorting; it
matches the lines in the order returned by the producer process against a list
of regular expressions. On the upside, this allows plugging Affe together with
the [[https://github.com/oantolin/orderless][Orderless]] completion style, which can give a consistent fuzzy filtering
experience across all Emacs commands, including synchronous and asynchronous
commands.

As possible enhancement of Affe, one could implement alphabetical and sorting by
length in the backend. By using a bucket sorting technique the sorting
complexity will stay sufficiently linear such that the performance impact should
be acceptable. However implementing a scoring-based sorting is probably not
feasible since this requires heavier computations in Elisp. But maybe nativecomp
Emacs is a game changer here?

* Alternatives

- [[https://github.com/bling/fzf.el][fzf.el]]: Runs the fzf command line program in an Emacs terminal
- [[https://github.com/10sr/fuzzy-finder-el][fuzzy-finder.el]]: Similar to fzf.el
- [[https://github.com/abo-abo/swiper][counsel-fzf]]: Ivy-specific, restarts find+fzf when updating the input pattern.
- [[https://github.com/minad/consult][consult-grep/consult-find]]: Perform the filtering in the frontend.
